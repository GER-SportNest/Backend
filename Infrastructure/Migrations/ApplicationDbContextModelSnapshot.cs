// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using NpgsqlTypes;
using SportNest.Infrastructure;

#nullable disable

namespace SportNest.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SportNest.Domain.Attendance", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("IsAttending")
                        .HasColumnType("boolean")
                        .HasColumnName("is_attending");

                    b.Property<string>("Reason")
                        .HasColumnType("text")
                        .HasColumnName("reason");

                    b.Property<long>("TrainingSessionId")
                        .HasColumnType("bigint")
                        .HasColumnName("training_session_id");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_attendance");

                    b.HasIndex("TrainingSessionId")
                        .HasDatabaseName("ix_attendance_training_session_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_attendance_user_id");

                    b.ToTable("attendance", (string)null);
                });

            modelBuilder.Entity("SportNest.Domain.Group", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<DateTimeOffset>("DeletedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_on");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long?>("SportId")
                        .HasColumnType("bigint")
                        .HasColumnName("sport_id");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_on");

                    b.HasKey("Id")
                        .HasName("pk_group");

                    b.HasIndex("SportId")
                        .HasDatabaseName("ix_group_sport_id");

                    b.ToTable("group", (string)null);
                });

            modelBuilder.Entity("SportNest.Domain.Sport", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasColumnName("search_vector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "german")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name" });

                    b.PrimitiveCollection<List<string>>("Translations")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("translations");

                    b.HasKey("Id")
                        .HasName("pk_sport");

                    b.HasIndex("SearchVector")
                        .HasDatabaseName("ix_sport_search_vector");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("SearchVector"), "GIN");

                    b.ToTable("sport", (string)null);
                });

            modelBuilder.Entity("SportNest.Domain.TrainingSession", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("GroupId")
                        .HasColumnType("bigint")
                        .HasColumnName("group_id");

                    b.Property<string>("Location")
                        .HasColumnType("text")
                        .HasColumnName("location");

                    b.Property<DateTime>("SessionDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("session_date")
                        .HasDefaultValueSql("now() AT TIME ZONE 'UTC'");

                    b.HasKey("Id")
                        .HasName("pk_training_session");

                    b.HasIndex("GroupId")
                        .HasDatabaseName("ix_training_session_group_id");

                    b.ToTable("training_session", (string)null);
                });

            modelBuilder.Entity("SportNest.Domain.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<DateTimeOffset>("DeletedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_on");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("display_name");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_on");

                    b.HasKey("Id")
                        .HasName("pk_user");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_user_email");

                    b.HasIndex("PhoneNumber")
                        .IsUnique()
                        .HasDatabaseName("ix_user_phone_number");

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("SportNest.Domain.UserGroupMembership", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<long>("GroupId")
                        .HasColumnType("bigint")
                        .HasColumnName("group_id");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<DateTimeOffset>("DeletedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_on");

                    b.Property<int>("Role")
                        .HasColumnType("integer")
                        .HasColumnName("role");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_on");

                    b.HasKey("UserId", "GroupId")
                        .HasName("pk_user_group_membership");

                    b.HasIndex("GroupId")
                        .HasDatabaseName("ix_user_group_membership_group_id");

                    b.ToTable("user_group_membership", (string)null);
                });

            modelBuilder.Entity("SportNest.Domain.Attendance", b =>
                {
                    b.HasOne("SportNest.Domain.TrainingSession", "TrainingSession")
                        .WithMany("Attendances")
                        .HasForeignKey("TrainingSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_attendance_training_session_training_session_id");

                    b.HasOne("SportNest.Domain.User", "User")
                        .WithMany("Attendances")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_attendance_user_user_id");

                    b.Navigation("TrainingSession");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SportNest.Domain.Group", b =>
                {
                    b.HasOne("SportNest.Domain.Sport", "Sport")
                        .WithMany("Groups")
                        .HasForeignKey("SportId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_group_sport_sport_id");

                    b.Navigation("Sport");
                });

            modelBuilder.Entity("SportNest.Domain.TrainingSession", b =>
                {
                    b.HasOne("SportNest.Domain.Group", "Group")
                        .WithMany("TrainingSessions")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_training_session_group_group_id");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("SportNest.Domain.UserGroupMembership", b =>
                {
                    b.HasOne("SportNest.Domain.Group", "Group")
                        .WithMany("Memberships")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_group_membership_group_group_id");

                    b.HasOne("SportNest.Domain.User", "User")
                        .WithMany("Memberships")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_group_membership_user_user_id");

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SportNest.Domain.Group", b =>
                {
                    b.Navigation("Memberships");

                    b.Navigation("TrainingSessions");
                });

            modelBuilder.Entity("SportNest.Domain.Sport", b =>
                {
                    b.Navigation("Groups");
                });

            modelBuilder.Entity("SportNest.Domain.TrainingSession", b =>
                {
                    b.Navigation("Attendances");
                });

            modelBuilder.Entity("SportNest.Domain.User", b =>
                {
                    b.Navigation("Attendances");

                    b.Navigation("Memberships");
                });
#pragma warning restore 612, 618
        }
    }
}
